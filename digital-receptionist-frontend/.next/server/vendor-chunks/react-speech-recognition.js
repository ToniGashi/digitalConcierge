"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-speech-recognition";
exports.ids = ["vendor-chunks/react-speech-recognition"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-speech-recognition/lib/NativeSpeechRecognition.js":
/*!******************************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/NativeSpeechRecognition.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.isNative = void 0;\nvar NativeSpeechRecognition =  false && (0);\nvar isNative = function isNative(SpeechRecognition) {\n    return SpeechRecognition === NativeSpeechRecognition;\n};\nexports.isNative = isNative;\nvar _default = NativeSpeechRecognition;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9OYXRpdmVTcGVlY2hSZWNvZ25pdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUdBLGdCQUFnQixHQUFHLEtBQUs7QUFDN0MsSUFBSUcsMEJBQTBCLE1BQWtCLElBQWdCQyxDQUFBQSxDQUFvSjtBQUVwTixJQUFJRixXQUFXLFNBQVNBLFNBQVNHLGlCQUFpQjtJQUNoRCxPQUFPQSxzQkFBc0JGO0FBQy9CO0FBRUFILGdCQUFnQixHQUFHRTtBQUNuQixJQUFJUSxXQUFXUDtBQUNmSCxrQkFBa0IsR0FBR1UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kaWdpdGFsLXJlY2VwdGlvbmlzdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGVlY2gtcmVjb2duaXRpb24vbGliL05hdGl2ZVNwZWVjaFJlY29nbml0aW9uLmpzP2IyYjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGV4cG9ydHMuaXNOYXRpdmUgPSB2b2lkIDA7XG52YXIgTmF0aXZlU3BlZWNoUmVjb2duaXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAod2luZG93LlNwZWVjaFJlY29nbml0aW9uIHx8IHdpbmRvdy53ZWJraXRTcGVlY2hSZWNvZ25pdGlvbiB8fCB3aW5kb3cubW96U3BlZWNoUmVjb2duaXRpb24gfHwgd2luZG93Lm1zU3BlZWNoUmVjb2duaXRpb24gfHwgd2luZG93Lm9TcGVlY2hSZWNvZ25pdGlvbik7XG5cbnZhciBpc05hdGl2ZSA9IGZ1bmN0aW9uIGlzTmF0aXZlKFNwZWVjaFJlY29nbml0aW9uKSB7XG4gIHJldHVybiBTcGVlY2hSZWNvZ25pdGlvbiA9PT0gTmF0aXZlU3BlZWNoUmVjb2duaXRpb247XG59O1xuXG5leHBvcnRzLmlzTmF0aXZlID0gaXNOYXRpdmU7XG52YXIgX2RlZmF1bHQgPSBOYXRpdmVTcGVlY2hSZWNvZ25pdGlvbjtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNOYXRpdmUiLCJOYXRpdmVTcGVlY2hSZWNvZ25pdGlvbiIsIndpbmRvdyIsIlNwZWVjaFJlY29nbml0aW9uIiwid2Via2l0U3BlZWNoUmVjb2duaXRpb24iLCJtb3pTcGVlY2hSZWNvZ25pdGlvbiIsIm1zU3BlZWNoUmVjb2duaXRpb24iLCJvU3BlZWNoUmVjb2duaXRpb24iLCJfZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-speech-recognition/lib/NativeSpeechRecognition.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-speech-recognition/lib/RecognitionManager.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/RecognitionManager.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _isAndroid = _interopRequireDefault(__webpack_require__(/*! ./isAndroid */ \"(ssr)/./node_modules/react-speech-recognition/lib/isAndroid.js\"));\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-speech-recognition/lib/utils.js\");\nvar _NativeSpeechRecognition = __webpack_require__(/*! ./NativeSpeechRecognition */ \"(ssr)/./node_modules/react-speech-recognition/lib/NativeSpeechRecognition.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _asyncToGenerator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nvar RecognitionManager = /*#__PURE__*/ function() {\n    function RecognitionManager(SpeechRecognition) {\n        _classCallCheck(this, RecognitionManager);\n        this.recognition = null;\n        this.pauseAfterDisconnect = false;\n        this.interimTranscript = \"\";\n        this.finalTranscript = \"\";\n        this.listening = false;\n        this.isMicrophoneAvailable = true;\n        this.subscribers = {};\n        this.onStopListening = function() {};\n        this.previousResultWasFinalOnly = false;\n        this.resetTranscript = this.resetTranscript.bind(this);\n        this.startListening = this.startListening.bind(this);\n        this.stopListening = this.stopListening.bind(this);\n        this.abortListening = this.abortListening.bind(this);\n        this.setSpeechRecognition = this.setSpeechRecognition.bind(this);\n        this.disableRecognition = this.disableRecognition.bind(this);\n        this.setSpeechRecognition(SpeechRecognition);\n        if ((0, _isAndroid[\"default\"])()) {\n            this.updateFinalTranscript = (0, _utils.debounce)(this.updateFinalTranscript, 250, true);\n        }\n    }\n    _createClass(RecognitionManager, [\n        {\n            key: \"setSpeechRecognition\",\n            value: function setSpeechRecognition(SpeechRecognition) {\n                var browserSupportsRecogniser = !!SpeechRecognition && ((0, _NativeSpeechRecognition.isNative)(SpeechRecognition) || (0, _utils.browserSupportsPolyfills)());\n                if (browserSupportsRecogniser) {\n                    this.disableRecognition();\n                    this.recognition = new SpeechRecognition();\n                    this.recognition.continuous = false;\n                    this.recognition.interimResults = true;\n                    this.recognition.onresult = this.updateTranscript.bind(this);\n                    this.recognition.onend = this.onRecognitionDisconnect.bind(this);\n                    this.recognition.onerror = this.onError.bind(this);\n                }\n                this.emitBrowserSupportsSpeechRecognitionChange(browserSupportsRecogniser);\n            }\n        },\n        {\n            key: \"subscribe\",\n            value: function subscribe(id, callbacks) {\n                this.subscribers[id] = callbacks;\n            }\n        },\n        {\n            key: \"unsubscribe\",\n            value: function unsubscribe(id) {\n                delete this.subscribers[id];\n            }\n        },\n        {\n            key: \"emitListeningChange\",\n            value: function emitListeningChange(listening) {\n                var _this = this;\n                this.listening = listening;\n                Object.keys(this.subscribers).forEach(function(id) {\n                    var onListeningChange = _this.subscribers[id].onListeningChange;\n                    onListeningChange(listening);\n                });\n            }\n        },\n        {\n            key: \"emitMicrophoneAvailabilityChange\",\n            value: function emitMicrophoneAvailabilityChange(isMicrophoneAvailable) {\n                var _this2 = this;\n                this.isMicrophoneAvailable = isMicrophoneAvailable;\n                Object.keys(this.subscribers).forEach(function(id) {\n                    var onMicrophoneAvailabilityChange = _this2.subscribers[id].onMicrophoneAvailabilityChange;\n                    onMicrophoneAvailabilityChange(isMicrophoneAvailable);\n                });\n            }\n        },\n        {\n            key: \"emitTranscriptChange\",\n            value: function emitTranscriptChange(interimTranscript, finalTranscript) {\n                var _this3 = this;\n                Object.keys(this.subscribers).forEach(function(id) {\n                    var onTranscriptChange = _this3.subscribers[id].onTranscriptChange;\n                    onTranscriptChange(interimTranscript, finalTranscript);\n                });\n            }\n        },\n        {\n            key: \"emitClearTranscript\",\n            value: function emitClearTranscript() {\n                var _this4 = this;\n                Object.keys(this.subscribers).forEach(function(id) {\n                    var onClearTranscript = _this4.subscribers[id].onClearTranscript;\n                    onClearTranscript();\n                });\n            }\n        },\n        {\n            key: \"emitBrowserSupportsSpeechRecognitionChange\",\n            value: function emitBrowserSupportsSpeechRecognitionChange(browserSupportsSpeechRecognitionChange) {\n                var _this5 = this;\n                Object.keys(this.subscribers).forEach(function(id) {\n                    var _this5$subscribers$id = _this5.subscribers[id], onBrowserSupportsSpeechRecognitionChange = _this5$subscribers$id.onBrowserSupportsSpeechRecognitionChange, onBrowserSupportsContinuousListeningChange = _this5$subscribers$id.onBrowserSupportsContinuousListeningChange;\n                    onBrowserSupportsSpeechRecognitionChange(browserSupportsSpeechRecognitionChange);\n                    onBrowserSupportsContinuousListeningChange(browserSupportsSpeechRecognitionChange);\n                });\n            }\n        },\n        {\n            key: \"disconnect\",\n            value: function disconnect(disconnectType) {\n                if (this.recognition && this.listening) {\n                    switch(disconnectType){\n                        case \"ABORT\":\n                            this.pauseAfterDisconnect = true;\n                            this.abort();\n                            break;\n                        case \"RESET\":\n                            this.pauseAfterDisconnect = false;\n                            this.abort();\n                            break;\n                        case \"STOP\":\n                        default:\n                            this.pauseAfterDisconnect = true;\n                            this.stop();\n                    }\n                }\n            }\n        },\n        {\n            key: \"disableRecognition\",\n            value: function disableRecognition() {\n                if (this.recognition) {\n                    this.recognition.onresult = function() {};\n                    this.recognition.onend = function() {};\n                    this.recognition.onerror = function() {};\n                    if (this.listening) {\n                        this.stopListening();\n                    }\n                }\n            }\n        },\n        {\n            key: \"onError\",\n            value: function onError(event) {\n                if (event && event.error && event.error === \"not-allowed\") {\n                    this.emitMicrophoneAvailabilityChange(false);\n                    this.disableRecognition();\n                }\n            }\n        },\n        {\n            key: \"onRecognitionDisconnect\",\n            value: function onRecognitionDisconnect() {\n                this.onStopListening();\n                this.listening = false;\n                if (this.pauseAfterDisconnect) {\n                    this.emitListeningChange(false);\n                } else if (this.recognition) {\n                    if (this.recognition.continuous) {\n                        this.startListening({\n                            continuous: this.recognition.continuous\n                        });\n                    } else {\n                        this.emitListeningChange(false);\n                    }\n                }\n                this.pauseAfterDisconnect = false;\n            }\n        },\n        {\n            key: \"updateTranscript\",\n            value: function updateTranscript(_ref) {\n                var results = _ref.results, resultIndex = _ref.resultIndex;\n                var currentIndex = resultIndex === undefined ? results.length - 1 : resultIndex;\n                this.interimTranscript = \"\";\n                this.finalTranscript = \"\";\n                for(var i = currentIndex; i < results.length; ++i){\n                    if (results[i].isFinal && (!(0, _isAndroid[\"default\"])() || results[i][0].confidence > 0)) {\n                        this.updateFinalTranscript(results[i][0].transcript);\n                    } else {\n                        this.interimTranscript = (0, _utils.concatTranscripts)(this.interimTranscript, results[i][0].transcript);\n                    }\n                }\n                var isDuplicateResult = false;\n                if (this.interimTranscript === \"\" && this.finalTranscript !== \"\") {\n                    if (this.previousResultWasFinalOnly) {\n                        isDuplicateResult = true;\n                    }\n                    this.previousResultWasFinalOnly = true;\n                } else {\n                    this.previousResultWasFinalOnly = false;\n                }\n                if (!isDuplicateResult) {\n                    this.emitTranscriptChange(this.interimTranscript, this.finalTranscript);\n                }\n            }\n        },\n        {\n            key: \"updateFinalTranscript\",\n            value: function updateFinalTranscript(newFinalTranscript) {\n                this.finalTranscript = (0, _utils.concatTranscripts)(this.finalTranscript, newFinalTranscript);\n            }\n        },\n        {\n            key: \"resetTranscript\",\n            value: function resetTranscript() {\n                this.disconnect(\"RESET\");\n            }\n        },\n        {\n            key: \"startListening\",\n            value: function() {\n                var _startListening = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee() {\n                    var _ref2, _ref2$continuous, continuous, language, isContinuousChanged, isLanguageChanged, _args = arguments;\n                    return regeneratorRuntime.wrap(function _callee$(_context) {\n                        while(1){\n                            switch(_context.prev = _context.next){\n                                case 0:\n                                    _ref2 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, _ref2$continuous = _ref2.continuous, continuous = _ref2$continuous === void 0 ? false : _ref2$continuous, language = _ref2.language;\n                                    if (this.recognition) {\n                                        _context.next = 3;\n                                        break;\n                                    }\n                                    return _context.abrupt(\"return\");\n                                case 3:\n                                    isContinuousChanged = continuous !== this.recognition.continuous;\n                                    isLanguageChanged = language && language !== this.recognition.lang;\n                                    if (!(isContinuousChanged || isLanguageChanged)) {\n                                        _context.next = 11;\n                                        break;\n                                    }\n                                    if (!this.listening) {\n                                        _context.next = 9;\n                                        break;\n                                    }\n                                    _context.next = 9;\n                                    return this.stopListening();\n                                case 9:\n                                    this.recognition.continuous = isContinuousChanged ? continuous : this.recognition.continuous;\n                                    this.recognition.lang = isLanguageChanged ? language : this.recognition.lang;\n                                case 11:\n                                    if (this.listening) {\n                                        _context.next = 22;\n                                        break;\n                                    }\n                                    if (!this.recognition.continuous) {\n                                        this.resetTranscript();\n                                        this.emitClearTranscript();\n                                    }\n                                    _context.prev = 13;\n                                    _context.next = 16;\n                                    return this.start();\n                                case 16:\n                                    this.emitListeningChange(true);\n                                    _context.next = 22;\n                                    break;\n                                case 19:\n                                    _context.prev = 19;\n                                    _context.t0 = _context[\"catch\"](13);\n                                    // DOMExceptions indicate a redundant microphone start - safe to swallow\n                                    if (!(_context.t0 instanceof DOMException)) {\n                                        this.emitMicrophoneAvailabilityChange(false);\n                                    }\n                                case 22:\n                                case \"end\":\n                                    return _context.stop();\n                            }\n                        }\n                    }, _callee, this, [\n                        [\n                            13,\n                            19\n                        ]\n                    ]);\n                }));\n                function startListening() {\n                    return _startListening.apply(this, arguments);\n                }\n                return startListening;\n            }()\n        },\n        {\n            key: \"abortListening\",\n            value: function() {\n                var _abortListening = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee2() {\n                    var _this6 = this;\n                    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while(1){\n                            switch(_context2.prev = _context2.next){\n                                case 0:\n                                    this.disconnect(\"ABORT\");\n                                    this.emitListeningChange(false);\n                                    _context2.next = 4;\n                                    return new Promise(function(resolve) {\n                                        _this6.onStopListening = resolve;\n                                    });\n                                case 4:\n                                case \"end\":\n                                    return _context2.stop();\n                            }\n                        }\n                    }, _callee2, this);\n                }));\n                function abortListening() {\n                    return _abortListening.apply(this, arguments);\n                }\n                return abortListening;\n            }()\n        },\n        {\n            key: \"stopListening\",\n            value: function() {\n                var _stopListening = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee3() {\n                    var _this7 = this;\n                    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                        while(1){\n                            switch(_context3.prev = _context3.next){\n                                case 0:\n                                    this.disconnect(\"STOP\");\n                                    this.emitListeningChange(false);\n                                    _context3.next = 4;\n                                    return new Promise(function(resolve) {\n                                        _this7.onStopListening = resolve;\n                                    });\n                                case 4:\n                                case \"end\":\n                                    return _context3.stop();\n                            }\n                        }\n                    }, _callee3, this);\n                }));\n                function stopListening() {\n                    return _stopListening.apply(this, arguments);\n                }\n                return stopListening;\n            }()\n        },\n        {\n            key: \"getRecognition\",\n            value: function getRecognition() {\n                return this.recognition;\n            }\n        },\n        {\n            key: \"start\",\n            value: function() {\n                var _start = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee4() {\n                    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                        while(1){\n                            switch(_context4.prev = _context4.next){\n                                case 0:\n                                    if (!(this.recognition && !this.listening)) {\n                                        _context4.next = 4;\n                                        break;\n                                    }\n                                    _context4.next = 3;\n                                    return this.recognition.start();\n                                case 3:\n                                    this.listening = true;\n                                case 4:\n                                case \"end\":\n                                    return _context4.stop();\n                            }\n                        }\n                    }, _callee4, this);\n                }));\n                function start() {\n                    return _start.apply(this, arguments);\n                }\n                return start;\n            }()\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                if (this.recognition && this.listening) {\n                    this.recognition.stop();\n                    this.listening = false;\n                }\n            }\n        },\n        {\n            key: \"abort\",\n            value: function abort() {\n                if (this.recognition && this.listening) {\n                    this.recognition.abort();\n                    this.listening = false;\n                }\n            }\n        }\n    ]);\n    return RecognitionManager;\n}();\nexports[\"default\"] = RecognitionManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-speech-recognition/lib/RecognitionManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-speech-recognition/lib/SpeechRecognition.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/SpeechRecognition.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.useSpeechRecognition = void 0;\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-speech-recognition/lib/utils.js\");\nvar _actions = __webpack_require__(/*! ./actions */ \"(ssr)/./node_modules/react-speech-recognition/lib/actions.js\");\nvar _reducers = __webpack_require__(/*! ./reducers */ \"(ssr)/./node_modules/react-speech-recognition/lib/reducers.js\");\nvar _RecognitionManager = _interopRequireDefault(__webpack_require__(/*! ./RecognitionManager */ \"(ssr)/./node_modules/react-speech-recognition/lib/RecognitionManager.js\"));\nvar _isAndroid = _interopRequireDefault(__webpack_require__(/*! ./isAndroid */ \"(ssr)/./node_modules/react-speech-recognition/lib/isAndroid.js\"));\nvar _NativeSpeechRecognition = _interopRequireDefault(__webpack_require__(/*! ./NativeSpeechRecognition */ \"(ssr)/./node_modules/react-speech-recognition/lib/NativeSpeechRecognition.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _asyncToGenerator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nvar _browserSupportsSpeechRecognition = !!_NativeSpeechRecognition[\"default\"];\nvar _browserSupportsContinuousListening = _browserSupportsSpeechRecognition && !(0, _isAndroid[\"default\"])();\nvar recognitionManager;\nvar useSpeechRecognition = function useSpeechRecognition() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref$transcribing = _ref.transcribing, transcribing = _ref$transcribing === void 0 ? true : _ref$transcribing, _ref$clearTranscriptO = _ref.clearTranscriptOnListen, clearTranscriptOnListen = _ref$clearTranscriptO === void 0 ? true : _ref$clearTranscriptO, _ref$commands = _ref.commands, commands = _ref$commands === void 0 ? [] : _ref$commands;\n    var _useState = (0, _react.useState)(SpeechRecognition.getRecognitionManager()), _useState2 = _slicedToArray(_useState, 1), recognitionManager = _useState2[0];\n    var _useState3 = (0, _react.useState)(_browserSupportsSpeechRecognition), _useState4 = _slicedToArray(_useState3, 2), browserSupportsSpeechRecognition = _useState4[0], setBrowserSupportsSpeechRecognition = _useState4[1];\n    var _useState5 = (0, _react.useState)(_browserSupportsContinuousListening), _useState6 = _slicedToArray(_useState5, 2), browserSupportsContinuousListening = _useState6[0], setBrowserSupportsContinuousListening = _useState6[1];\n    var _useReducer = (0, _react.useReducer)(_reducers.transcriptReducer, {\n        interimTranscript: recognitionManager.interimTranscript,\n        finalTranscript: \"\"\n    }), _useReducer2 = _slicedToArray(_useReducer, 2), _useReducer2$ = _useReducer2[0], interimTranscript = _useReducer2$.interimTranscript, finalTranscript = _useReducer2$.finalTranscript, dispatch = _useReducer2[1];\n    var _useState7 = (0, _react.useState)(recognitionManager.listening), _useState8 = _slicedToArray(_useState7, 2), listening = _useState8[0], setListening = _useState8[1];\n    var _useState9 = (0, _react.useState)(recognitionManager.isMicrophoneAvailable), _useState10 = _slicedToArray(_useState9, 2), isMicrophoneAvailable = _useState10[0], setMicrophoneAvailable = _useState10[1];\n    var commandsRef = (0, _react.useRef)(commands);\n    commandsRef.current = commands;\n    var dispatchClearTranscript = function dispatchClearTranscript() {\n        dispatch((0, _actions.clearTranscript)());\n    };\n    var resetTranscript = (0, _react.useCallback)(function() {\n        recognitionManager.resetTranscript();\n        dispatchClearTranscript();\n    }, [\n        recognitionManager\n    ]);\n    var testFuzzyMatch = function testFuzzyMatch(command, input, fuzzyMatchingThreshold) {\n        var commandToString = _typeof(command) === \"object\" ? command.toString() : command;\n        var commandWithoutSpecials = commandToString.replace(/[&/\\\\#,+()!$~%.'\":*?<>{}]/g, \"\").replace(/  +/g, \" \").trim();\n        var howSimilar = (0, _utils.compareTwoStringsUsingDiceCoefficient)(commandWithoutSpecials, input);\n        if (howSimilar >= fuzzyMatchingThreshold) {\n            return {\n                command: command,\n                commandWithoutSpecials: commandWithoutSpecials,\n                howSimilar: howSimilar,\n                isFuzzyMatch: true\n            };\n        }\n        return null;\n    };\n    var testMatch = function testMatch(command, input) {\n        var pattern = (0, _utils.commandToRegExp)(command);\n        var result = pattern.exec(input);\n        if (result) {\n            return {\n                command: command,\n                parameters: result.slice(1)\n            };\n        }\n        return null;\n    };\n    var matchCommands = (0, _react.useCallback)(function(newInterimTranscript, newFinalTranscript) {\n        commandsRef.current.forEach(function(_ref2) {\n            var command = _ref2.command, callback = _ref2.callback, _ref2$matchInterim = _ref2.matchInterim, matchInterim = _ref2$matchInterim === void 0 ? false : _ref2$matchInterim, _ref2$isFuzzyMatch = _ref2.isFuzzyMatch, isFuzzyMatch = _ref2$isFuzzyMatch === void 0 ? false : _ref2$isFuzzyMatch, _ref2$fuzzyMatchingTh = _ref2.fuzzyMatchingThreshold, fuzzyMatchingThreshold = _ref2$fuzzyMatchingTh === void 0 ? 0.8 : _ref2$fuzzyMatchingTh, _ref2$bestMatchOnly = _ref2.bestMatchOnly, bestMatchOnly = _ref2$bestMatchOnly === void 0 ? false : _ref2$bestMatchOnly;\n            var input = !newFinalTranscript && matchInterim ? newInterimTranscript.trim() : newFinalTranscript.trim();\n            var subcommands = Array.isArray(command) ? command : [\n                command\n            ];\n            var results = subcommands.map(function(subcommand) {\n                if (isFuzzyMatch) {\n                    return testFuzzyMatch(subcommand, input, fuzzyMatchingThreshold);\n                }\n                return testMatch(subcommand, input);\n            }).filter(function(x) {\n                return x;\n            });\n            if (isFuzzyMatch && bestMatchOnly && results.length >= 2) {\n                results.sort(function(a, b) {\n                    return b.howSimilar - a.howSimilar;\n                });\n                var _results$ = results[0], _command = _results$.command, commandWithoutSpecials = _results$.commandWithoutSpecials, howSimilar = _results$.howSimilar;\n                callback(commandWithoutSpecials, input, howSimilar, {\n                    command: _command,\n                    resetTranscript: resetTranscript\n                });\n            } else {\n                results.forEach(function(result) {\n                    if (result.isFuzzyMatch) {\n                        var _command2 = result.command, _commandWithoutSpecials = result.commandWithoutSpecials, _howSimilar = result.howSimilar;\n                        callback(_commandWithoutSpecials, input, _howSimilar, {\n                            command: _command2,\n                            resetTranscript: resetTranscript\n                        });\n                    } else {\n                        var _command3 = result.command, parameters = result.parameters;\n                        callback.apply(void 0, _toConsumableArray(parameters).concat([\n                            {\n                                command: _command3,\n                                resetTranscript: resetTranscript\n                            }\n                        ]));\n                    }\n                });\n            }\n        });\n    }, [\n        resetTranscript\n    ]);\n    var handleTranscriptChange = (0, _react.useCallback)(function(newInterimTranscript, newFinalTranscript) {\n        if (transcribing) {\n            dispatch((0, _actions.appendTranscript)(newInterimTranscript, newFinalTranscript));\n        }\n        matchCommands(newInterimTranscript, newFinalTranscript);\n    }, [\n        matchCommands,\n        transcribing\n    ]);\n    var handleClearTranscript = (0, _react.useCallback)(function() {\n        if (clearTranscriptOnListen) {\n            dispatchClearTranscript();\n        }\n    }, [\n        clearTranscriptOnListen\n    ]);\n    (0, _react.useEffect)(function() {\n        var id = SpeechRecognition.counter;\n        SpeechRecognition.counter += 1;\n        var callbacks = {\n            onListeningChange: setListening,\n            onMicrophoneAvailabilityChange: setMicrophoneAvailable,\n            onTranscriptChange: handleTranscriptChange,\n            onClearTranscript: handleClearTranscript,\n            onBrowserSupportsSpeechRecognitionChange: setBrowserSupportsSpeechRecognition,\n            onBrowserSupportsContinuousListeningChange: setBrowserSupportsContinuousListening\n        };\n        recognitionManager.subscribe(id, callbacks);\n        return function() {\n            recognitionManager.unsubscribe(id);\n        };\n    }, [\n        transcribing,\n        clearTranscriptOnListen,\n        recognitionManager,\n        handleTranscriptChange,\n        handleClearTranscript\n    ]);\n    var transcript = (0, _utils.concatTranscripts)(finalTranscript, interimTranscript);\n    return {\n        transcript: transcript,\n        interimTranscript: interimTranscript,\n        finalTranscript: finalTranscript,\n        listening: listening,\n        isMicrophoneAvailable: isMicrophoneAvailable,\n        resetTranscript: resetTranscript,\n        browserSupportsSpeechRecognition: browserSupportsSpeechRecognition,\n        browserSupportsContinuousListening: browserSupportsContinuousListening\n    };\n};\nexports.useSpeechRecognition = useSpeechRecognition;\nvar SpeechRecognition = {\n    counter: 0,\n    applyPolyfill: function applyPolyfill(PolyfillSpeechRecognition) {\n        if (recognitionManager) {\n            recognitionManager.setSpeechRecognition(PolyfillSpeechRecognition);\n        } else {\n            recognitionManager = new _RecognitionManager[\"default\"](PolyfillSpeechRecognition);\n        }\n        var browserSupportsPolyfill = !!PolyfillSpeechRecognition && (0, _utils.browserSupportsPolyfills)();\n        _browserSupportsSpeechRecognition = browserSupportsPolyfill;\n        _browserSupportsContinuousListening = browserSupportsPolyfill;\n    },\n    removePolyfill: function removePolyfill() {\n        if (recognitionManager) {\n            recognitionManager.setSpeechRecognition(_NativeSpeechRecognition[\"default\"]);\n        } else {\n            recognitionManager = new _RecognitionManager[\"default\"](_NativeSpeechRecognition[\"default\"]);\n        }\n        _browserSupportsSpeechRecognition = !!_NativeSpeechRecognition[\"default\"];\n        _browserSupportsContinuousListening = _browserSupportsSpeechRecognition && !(0, _isAndroid[\"default\"])();\n    },\n    getRecognitionManager: function getRecognitionManager() {\n        if (!recognitionManager) {\n            recognitionManager = new _RecognitionManager[\"default\"](_NativeSpeechRecognition[\"default\"]);\n        }\n        return recognitionManager;\n    },\n    getRecognition: function getRecognition() {\n        var recognitionManager = SpeechRecognition.getRecognitionManager();\n        return recognitionManager.getRecognition();\n    },\n    startListening: function() {\n        var _startListening = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee() {\n            var _ref3, continuous, language, recognitionManager, _args = arguments;\n            return regeneratorRuntime.wrap(function _callee$(_context) {\n                while(1){\n                    switch(_context.prev = _context.next){\n                        case 0:\n                            _ref3 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, continuous = _ref3.continuous, language = _ref3.language;\n                            recognitionManager = SpeechRecognition.getRecognitionManager();\n                            _context.next = 4;\n                            return recognitionManager.startListening({\n                                continuous: continuous,\n                                language: language\n                            });\n                        case 4:\n                        case \"end\":\n                            return _context.stop();\n                    }\n                }\n            }, _callee);\n        }));\n        function startListening() {\n            return _startListening.apply(this, arguments);\n        }\n        return startListening;\n    }(),\n    stopListening: function() {\n        var _stopListening = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee2() {\n            var recognitionManager;\n            return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                while(1){\n                    switch(_context2.prev = _context2.next){\n                        case 0:\n                            recognitionManager = SpeechRecognition.getRecognitionManager();\n                            _context2.next = 3;\n                            return recognitionManager.stopListening();\n                        case 3:\n                        case \"end\":\n                            return _context2.stop();\n                    }\n                }\n            }, _callee2);\n        }));\n        function stopListening() {\n            return _stopListening.apply(this, arguments);\n        }\n        return stopListening;\n    }(),\n    abortListening: function() {\n        var _abortListening = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee3() {\n            var recognitionManager;\n            return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                while(1){\n                    switch(_context3.prev = _context3.next){\n                        case 0:\n                            recognitionManager = SpeechRecognition.getRecognitionManager();\n                            _context3.next = 3;\n                            return recognitionManager.abortListening();\n                        case 3:\n                        case \"end\":\n                            return _context3.stop();\n                    }\n                }\n            }, _callee3);\n        }));\n        function abortListening() {\n            return _abortListening.apply(this, arguments);\n        }\n        return abortListening;\n    }(),\n    browserSupportsSpeechRecognition: function browserSupportsSpeechRecognition() {\n        return _browserSupportsSpeechRecognition;\n    },\n    browserSupportsContinuousListening: function browserSupportsContinuousListening() {\n        return _browserSupportsContinuousListening;\n    }\n};\nvar _default = SpeechRecognition;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-speech-recognition/lib/SpeechRecognition.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-speech-recognition/lib/actions.js":
/*!**************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/actions.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.appendTranscript = exports.clearTranscript = void 0;\nvar _constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/react-speech-recognition/lib/constants.js\");\nvar clearTranscript = function clearTranscript() {\n    return {\n        type: _constants.CLEAR_TRANSCRIPT\n    };\n};\nexports.clearTranscript = clearTranscript;\nvar appendTranscript = function appendTranscript(interimTranscript, finalTranscript) {\n    return {\n        type: _constants.APPEND_TRANSCRIPT,\n        payload: {\n            interimTranscript: interimTranscript,\n            finalTranscript: finalTranscript\n        }\n    };\n};\nexports.appendTranscript = appendTranscript;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9hY3Rpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCx3QkFBd0IsR0FBR0EsdUJBQXVCLEdBQUcsS0FBSztBQUUxRCxJQUFJSSxhQUFhQyxtQkFBT0EsQ0FBQyxtRkFBYTtBQUV0QyxJQUFJRixrQkFBa0IsU0FBU0E7SUFDN0IsT0FBTztRQUNMRyxNQUFNRixXQUFXRyxnQkFBZ0I7SUFDbkM7QUFDRjtBQUVBUCx1QkFBdUIsR0FBR0c7QUFFMUIsSUFBSUQsbUJBQW1CLFNBQVNBLGlCQUFpQk0saUJBQWlCLEVBQUVDLGVBQWU7SUFDakYsT0FBTztRQUNMSCxNQUFNRixXQUFXTSxpQkFBaUI7UUFDbENDLFNBQVM7WUFDUEgsbUJBQW1CQTtZQUNuQkMsaUJBQWlCQTtRQUNuQjtJQUNGO0FBQ0Y7QUFFQVQsd0JBQXdCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGlnaXRhbC1yZWNlcHRpb25pc3QvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9hY3Rpb25zLmpzP2FjNzIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFwcGVuZFRyYW5zY3JpcHQgPSBleHBvcnRzLmNsZWFyVHJhbnNjcmlwdCA9IHZvaWQgMDtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5cbnZhciBjbGVhclRyYW5zY3JpcHQgPSBmdW5jdGlvbiBjbGVhclRyYW5zY3JpcHQoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogX2NvbnN0YW50cy5DTEVBUl9UUkFOU0NSSVBUXG4gIH07XG59O1xuXG5leHBvcnRzLmNsZWFyVHJhbnNjcmlwdCA9IGNsZWFyVHJhbnNjcmlwdDtcblxudmFyIGFwcGVuZFRyYW5zY3JpcHQgPSBmdW5jdGlvbiBhcHBlbmRUcmFuc2NyaXB0KGludGVyaW1UcmFuc2NyaXB0LCBmaW5hbFRyYW5zY3JpcHQpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBfY29uc3RhbnRzLkFQUEVORF9UUkFOU0NSSVBULFxuICAgIHBheWxvYWQ6IHtcbiAgICAgIGludGVyaW1UcmFuc2NyaXB0OiBpbnRlcmltVHJhbnNjcmlwdCxcbiAgICAgIGZpbmFsVHJhbnNjcmlwdDogZmluYWxUcmFuc2NyaXB0XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5hcHBlbmRUcmFuc2NyaXB0ID0gYXBwZW5kVHJhbnNjcmlwdDsiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJhcHBlbmRUcmFuc2NyaXB0IiwiY2xlYXJUcmFuc2NyaXB0IiwiX2NvbnN0YW50cyIsInJlcXVpcmUiLCJ0eXBlIiwiQ0xFQVJfVFJBTlNDUklQVCIsImludGVyaW1UcmFuc2NyaXB0IiwiZmluYWxUcmFuc2NyaXB0IiwiQVBQRU5EX1RSQU5TQ1JJUFQiLCJwYXlsb2FkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-speech-recognition/lib/actions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-speech-recognition/lib/constants.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/constants.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.APPEND_TRANSCRIPT = exports.CLEAR_TRANSCRIPT = void 0;\nvar CLEAR_TRANSCRIPT = \"CLEAR_TRANSCRIPT\";\nexports.CLEAR_TRANSCRIPT = CLEAR_TRANSCRIPT;\nvar APPEND_TRANSCRIPT = \"APPEND_TRANSCRIPT\";\nexports.APPEND_TRANSCRIPT = APPEND_TRANSCRIPT;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELHlCQUF5QixHQUFHQSx3QkFBd0IsR0FBRyxLQUFLO0FBQzVELElBQUlHLG1CQUFtQjtBQUN2Qkgsd0JBQXdCLEdBQUdHO0FBQzNCLElBQUlELG9CQUFvQjtBQUN4QkYseUJBQXlCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGlnaXRhbC1yZWNlcHRpb25pc3QvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9jb25zdGFudHMuanM/OWY4MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQVBQRU5EX1RSQU5TQ1JJUFQgPSBleHBvcnRzLkNMRUFSX1RSQU5TQ1JJUFQgPSB2b2lkIDA7XG52YXIgQ0xFQVJfVFJBTlNDUklQVCA9ICdDTEVBUl9UUkFOU0NSSVBUJztcbmV4cG9ydHMuQ0xFQVJfVFJBTlNDUklQVCA9IENMRUFSX1RSQU5TQ1JJUFQ7XG52YXIgQVBQRU5EX1RSQU5TQ1JJUFQgPSAnQVBQRU5EX1RSQU5TQ1JJUFQnO1xuZXhwb3J0cy5BUFBFTkRfVFJBTlNDUklQVCA9IEFQUEVORF9UUkFOU0NSSVBUOyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkFQUEVORF9UUkFOU0NSSVBUIiwiQ0xFQVJfVFJBTlNDUklQVCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-speech-recognition/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-speech-recognition/lib/index.js":
/*!************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"useSpeechRecognition\", ({\n    enumerable: true,\n    get: function get() {\n        return _SpeechRecognition.useSpeechRecognition;\n    }\n}));\nexports[\"default\"] = void 0;\nvar _SpeechRecognition = _interopRequireWildcard(__webpack_require__(/*! ./SpeechRecognition */ \"(ssr)/./node_modules/react-speech-recognition/lib/SpeechRecognition.js\"));\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nvar _default = _SpeechRecognition[\"default\"];\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLFNBQVNBLFFBQVFDLEdBQUc7SUFBSTtJQUEyQixJQUFJLE9BQU9DLFdBQVcsY0FBYyxPQUFPQSxPQUFPQyxRQUFRLEtBQUssVUFBVTtRQUFFSCxVQUFVLFNBQVNBLFFBQVFDLEdBQUc7WUFBSSxPQUFPLE9BQU9BO1FBQUs7SUFBRyxPQUFPO1FBQUVELFVBQVUsU0FBU0EsUUFBUUMsR0FBRztZQUFJLE9BQU9BLE9BQU8sT0FBT0MsV0FBVyxjQUFjRCxJQUFJRyxXQUFXLEtBQUtGLFVBQVVELFFBQVFDLE9BQU9HLFNBQVMsR0FBRyxXQUFXLE9BQU9KO1FBQUs7SUFBRztJQUFFLE9BQU9ELFFBQVFDO0FBQU07QUFFelhLLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGSCx3REFBdUQ7SUFDckRJLFlBQVk7SUFDWkMsS0FBSyxTQUFTQTtRQUNaLE9BQU9DLG1CQUFtQkMsb0JBQW9CO0lBQ2hEO0FBQ0YsQ0FBQyxFQUFDO0FBQ0ZMLGtCQUFrQixHQUFHLEtBQUs7QUFFMUIsSUFBSUkscUJBQXFCRSx3QkFBd0JDLG1CQUFPQSxDQUFDLG1HQUFxQjtBQUU5RSxTQUFTQztJQUE2QixJQUFJLE9BQU9DLFlBQVksWUFBWSxPQUFPO0lBQU0sSUFBSUMsUUFBUSxJQUFJRDtJQUFXRCwyQkFBMkIsU0FBU0E7UUFBNkIsT0FBT0U7SUFBTztJQUFHLE9BQU9BO0FBQU87QUFFak4sU0FBU0osd0JBQXdCYixHQUFHO0lBQUksSUFBSUEsT0FBT0EsSUFBSWtCLFVBQVUsRUFBRTtRQUFFLE9BQU9sQjtJQUFLO0lBQUUsSUFBSUEsUUFBUSxRQUFRRCxRQUFRQyxTQUFTLFlBQVksT0FBT0EsUUFBUSxZQUFZO1FBQUUsT0FBTztZQUFFLFdBQVdBO1FBQUk7SUFBRztJQUFFLElBQUlpQixRQUFRRjtJQUE0QixJQUFJRSxTQUFTQSxNQUFNRSxHQUFHLENBQUNuQixNQUFNO1FBQUUsT0FBT2lCLE1BQU1QLEdBQUcsQ0FBQ1Y7SUFBTTtJQUFFLElBQUlvQixTQUFTLENBQUM7SUFBRyxJQUFJQyx3QkFBd0JoQixPQUFPQyxjQUFjLElBQUlELE9BQU9pQix3QkFBd0I7SUFBRSxJQUFLLElBQUlDLE9BQU92QixJQUFLO1FBQUUsSUFBSUssT0FBT0QsU0FBUyxDQUFDb0IsY0FBYyxDQUFDQyxJQUFJLENBQUN6QixLQUFLdUIsTUFBTTtZQUFFLElBQUlHLE9BQU9MLHdCQUF3QmhCLE9BQU9pQix3QkFBd0IsQ0FBQ3RCLEtBQUt1QixPQUFPO1lBQU0sSUFBSUcsUUFBU0EsQ0FBQUEsS0FBS2hCLEdBQUcsSUFBSWdCLEtBQUtDLEdBQUcsR0FBRztnQkFBRXRCLE9BQU9DLGNBQWMsQ0FBQ2MsUUFBUUcsS0FBS0c7WUFBTyxPQUFPO2dCQUFFTixNQUFNLENBQUNHLElBQUksR0FBR3ZCLEdBQUcsQ0FBQ3VCLElBQUk7WUFBRTtRQUFFO0lBQUU7SUFBRUgsTUFBTSxDQUFDLFVBQVUsR0FBR3BCO0lBQUssSUFBSWlCLE9BQU87UUFBRUEsTUFBTVUsR0FBRyxDQUFDM0IsS0FBS29CO0lBQVM7SUFBRSxPQUFPQTtBQUFRO0FBRTd1QixJQUFJUSxXQUFXakIsa0JBQWtCLENBQUMsVUFBVTtBQUM1Q0osa0JBQWtCLEdBQUdxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2RpZ2l0YWwtcmVjZXB0aW9uaXN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwZWVjaC1yZWNvZ25pdGlvbi9saWIvaW5kZXguanM/ZjVlNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidXNlU3BlZWNoUmVjb2duaXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1NwZWVjaFJlY29nbml0aW9uLnVzZVNwZWVjaFJlY29nbml0aW9uO1xuICB9XG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX1NwZWVjaFJlY29nbml0aW9uID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vU3BlZWNoUmVjb2duaXRpb25cIikpO1xuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBcImRlZmF1bHRcIjogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG52YXIgX2RlZmF1bHQgPSBfU3BlZWNoUmVjb2duaXRpb25bXCJkZWZhdWx0XCJdO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiXSwibmFtZXMiOlsiX3R5cGVvZiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJfU3BlZWNoUmVjb2duaXRpb24iLCJ1c2VTcGVlY2hSZWNvZ25pdGlvbiIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIldlYWtNYXAiLCJjYWNoZSIsIl9fZXNNb2R1bGUiLCJoYXMiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiX2RlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-speech-recognition/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-speech-recognition/lib/isAndroid.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/isAndroid.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _default = function _default() {\n    return /(android)/i.test(typeof navigator !== \"undefined\" ? navigator.userAgent : \"\");\n};\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9pc0FuZHJvaWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFrQixHQUFHLEtBQUs7QUFFMUIsSUFBSUUsV0FBVyxTQUFTQTtJQUN0QixPQUFPLGFBQWFDLElBQUksQ0FBQyxPQUFPQyxjQUFjLGNBQWNBLFVBQVVDLFNBQVMsR0FBRztBQUNwRjtBQUVBTCxrQkFBa0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kaWdpdGFsLXJlY2VwdGlvbmlzdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGVlY2gtcmVjb2duaXRpb24vbGliL2lzQW5kcm9pZC5qcz8yZTIwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfZGVmYXVsdCA9IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICByZXR1cm4gLyhhbmRyb2lkKS9pLnRlc3QodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgPyBuYXZpZ2F0b3IudXNlckFnZW50IDogJycpO1xufTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfZGVmYXVsdCIsInRlc3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-speech-recognition/lib/isAndroid.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-speech-recognition/lib/reducers.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/reducers.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.transcriptReducer = void 0;\nvar _constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/react-speech-recognition/lib/constants.js\");\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-speech-recognition/lib/utils.js\");\nvar transcriptReducer = function transcriptReducer(state, action) {\n    switch(action.type){\n        case _constants.CLEAR_TRANSCRIPT:\n            return {\n                interimTranscript: \"\",\n                finalTranscript: \"\"\n            };\n        case _constants.APPEND_TRANSCRIPT:\n            return {\n                interimTranscript: action.payload.interimTranscript,\n                finalTranscript: (0, _utils.concatTranscripts)(state.finalTranscript, action.payload.finalTranscript)\n            };\n        default:\n            throw new Error();\n    }\n};\nexports.transcriptReducer = transcriptReducer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9yZWR1Y2Vycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQseUJBQXlCLEdBQUcsS0FBSztBQUVqQyxJQUFJRyxhQUFhQyxtQkFBT0EsQ0FBQyxtRkFBYTtBQUV0QyxJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQywyRUFBUztBQUU5QixJQUFJRixvQkFBb0IsU0FBU0Esa0JBQWtCSSxLQUFLLEVBQUVDLE1BQU07SUFDOUQsT0FBUUEsT0FBT0MsSUFBSTtRQUNqQixLQUFLTCxXQUFXTSxnQkFBZ0I7WUFDOUIsT0FBTztnQkFDTEMsbUJBQW1CO2dCQUNuQkMsaUJBQWlCO1lBQ25CO1FBRUYsS0FBS1IsV0FBV1MsaUJBQWlCO1lBQy9CLE9BQU87Z0JBQ0xGLG1CQUFtQkgsT0FBT00sT0FBTyxDQUFDSCxpQkFBaUI7Z0JBQ25EQyxpQkFBaUIsQ0FBQyxHQUFHTixPQUFPUyxpQkFBaUIsRUFBRVIsTUFBTUssZUFBZSxFQUFFSixPQUFPTSxPQUFPLENBQUNGLGVBQWU7WUFDdEc7UUFFRjtZQUNFLE1BQU0sSUFBSUk7SUFDZDtBQUNGO0FBRUFmLHlCQUF5QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RpZ2l0YWwtcmVjZXB0aW9uaXN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwZWVjaC1yZWNvZ25pdGlvbi9saWIvcmVkdWNlcnMuanM/MmU3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudHJhbnNjcmlwdFJlZHVjZXIgPSB2b2lkIDA7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbnZhciB0cmFuc2NyaXB0UmVkdWNlciA9IGZ1bmN0aW9uIHRyYW5zY3JpcHRSZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgX2NvbnN0YW50cy5DTEVBUl9UUkFOU0NSSVBUOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaW50ZXJpbVRyYW5zY3JpcHQ6ICcnLFxuICAgICAgICBmaW5hbFRyYW5zY3JpcHQ6ICcnXG4gICAgICB9O1xuXG4gICAgY2FzZSBfY29uc3RhbnRzLkFQUEVORF9UUkFOU0NSSVBUOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaW50ZXJpbVRyYW5zY3JpcHQ6IGFjdGlvbi5wYXlsb2FkLmludGVyaW1UcmFuc2NyaXB0LFxuICAgICAgICBmaW5hbFRyYW5zY3JpcHQ6ICgwLCBfdXRpbHMuY29uY2F0VHJhbnNjcmlwdHMpKHN0YXRlLmZpbmFsVHJhbnNjcmlwdCwgYWN0aW9uLnBheWxvYWQuZmluYWxUcmFuc2NyaXB0KVxuICAgICAgfTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgfVxufTtcblxuZXhwb3J0cy50cmFuc2NyaXB0UmVkdWNlciA9IHRyYW5zY3JpcHRSZWR1Y2VyOyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRyYW5zY3JpcHRSZWR1Y2VyIiwiX2NvbnN0YW50cyIsInJlcXVpcmUiLCJfdXRpbHMiLCJzdGF0ZSIsImFjdGlvbiIsInR5cGUiLCJDTEVBUl9UUkFOU0NSSVBUIiwiaW50ZXJpbVRyYW5zY3JpcHQiLCJmaW5hbFRyYW5zY3JpcHQiLCJBUFBFTkRfVFJBTlNDUklQVCIsInBheWxvYWQiLCJjb25jYXRUcmFuc2NyaXB0cyIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-speech-recognition/lib/reducers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-speech-recognition/lib/utils.js":
/*!************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/utils.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.browserSupportsPolyfills = exports.compareTwoStringsUsingDiceCoefficient = exports.commandToRegExp = exports.concatTranscripts = exports.debounce = void 0;\nvar debounce = function debounce(func, wait, immediate) {\n    var timeout;\n    return function() {\n        var context = this;\n        var args = arguments;\n        var later = function later() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n        var callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n    };\n};\nexports.debounce = debounce;\nvar concatTranscripts = function concatTranscripts() {\n    for(var _len = arguments.length, transcriptParts = new Array(_len), _key = 0; _key < _len; _key++){\n        transcriptParts[_key] = arguments[_key];\n    }\n    return transcriptParts.map(function(t) {\n        return t.trim();\n    }).join(\" \").trim();\n}; // The command matching code is a modified version of Backbone.Router by Jeremy Ashkenas, under the MIT license.\nexports.concatTranscripts = concatTranscripts;\nvar optionalParam = /\\s*\\((.*?)\\)\\s*/g;\nvar optionalRegex = /(\\(\\?:[^)]+\\))\\?/g;\nvar namedParam = /(\\(\\?)?:\\w+/g;\nvar splatParam = /\\*/g;\nvar escapeRegExp = /[-{}[\\]+?.,\\\\^$|#]/g;\nvar commandToRegExp = function commandToRegExp(command) {\n    if (command instanceof RegExp) {\n        return new RegExp(command.source, \"i\");\n    }\n    command = command.replace(escapeRegExp, \"\\\\$&\").replace(optionalParam, \"(?:$1)?\").replace(namedParam, function(match, optional) {\n        return optional ? match : \"([^\\\\s]+)\";\n    }).replace(splatParam, \"(.*?)\").replace(optionalRegex, \"\\\\s*$1?\\\\s*\");\n    return new RegExp(\"^\" + command + \"$\", \"i\");\n}; // this is from https://github.com/aceakash/string-similarity\nexports.commandToRegExp = commandToRegExp;\nvar compareTwoStringsUsingDiceCoefficient = function compareTwoStringsUsingDiceCoefficient(first, second) {\n    first = first.replace(/\\s+/g, \"\").toLowerCase();\n    second = second.replace(/\\s+/g, \"\").toLowerCase();\n    if (!first.length && !second.length) return 1; // if both are empty strings\n    if (!first.length || !second.length) return 0; // if only one is empty string\n    if (first === second) return 1; // identical\n    if (first.length === 1 && second.length === 1) return 0; // both are 1-letter strings\n    if (first.length < 2 || second.length < 2) return 0; // if either is a 1-letter string\n    var firstBigrams = new Map();\n    for(var i = 0; i < first.length - 1; i++){\n        var bigram = first.substring(i, i + 2);\n        var count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) + 1 : 1;\n        firstBigrams.set(bigram, count);\n    }\n    var intersectionSize = 0;\n    for(var _i = 0; _i < second.length - 1; _i++){\n        var _bigram = second.substring(_i, _i + 2);\n        var _count = firstBigrams.has(_bigram) ? firstBigrams.get(_bigram) : 0;\n        if (_count > 0) {\n            firstBigrams.set(_bigram, _count - 1);\n            intersectionSize++;\n        }\n    }\n    return 2.0 * intersectionSize / (first.length + second.length - 2);\n};\nexports.compareTwoStringsUsingDiceCoefficient = compareTwoStringsUsingDiceCoefficient;\nvar browserSupportsPolyfills = function browserSupportsPolyfills() {\n    return  false && (0);\n};\nexports.browserSupportsPolyfills = browserSupportsPolyfills;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-speech-recognition/lib/utils.js\n");

/***/ })

};
;